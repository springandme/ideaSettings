<application>
  <component name="AppStorage">
    <histories>
      <item value="Execute the annotated method with a fixed period in milliseconds between the * end of the last invocation and the start of the next. * @return the delay in milliseconds" />
      <item value="fixed" />
      <item value="The message is 142772 bytes when serialized which is larger than the total memory buffer you have configured with the buffer.memory configuration." />
      <item value="Can't convert key of class java.lang.String to class org.apache.kafka.common.serialization.IntegerSerializer specified in key.serializer" />
      <item value="Unchecked call to 'send(String, K, V)' as a member of raw type" />
      <item value="boostrap-server is not a recognized option" />
      <item value="Cannot allocate memory" />
      <item value="Generates getters for all fields, a useful toString method, and hashCode and equals implementations that check * all non-transient fields. Will also generate setters for all non-final fields, as well as a constructor. * &lt;p&gt; * Equivalent to {@code @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode}. * &lt;p&gt; * Complete documentation is found at &lt;a href=&quot;https://projectlombok.org/features/Data&quot;&gt;the project lombok features page for &amp;#64;Data&lt;/a&gt;." />
      <item value="vaccination" />
      <item value="detect" />
      <item value="detect Org" />
      <item value="cured" />
      <item value="suspected" />
      <item value="随意" />
      <item value="任意" />
      <item value="Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. * &lt;p&gt; * For example, given HTML {@code &lt;p&gt;Hello &lt;b&gt;there&lt;/b&gt; now! &lt;/p&gt;}, {@code p.text()} returns {@code &quot;Hello there now!&quot;}" />
      <item value="Get the combined text of all the matched elements. * &lt;p&gt; * Note that it is possible to get repeats if the matched elements contain both parent elements and their own * children, as the Element.text() method returns the combined text of a parent and all its children. * @return string of all text: unescaped and no HTML." />
      <item value="Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements * may include this element, or any of its children. * &lt;p&gt; * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because * multiple filters can be combined, e.g.:" />
      <item value="typos" />
      <item value="Obtains the message entity of this response, if any. * The entity is provided by calling {@link #setEntity setEntity}." />
      <item value="Initial job has not accepted any resources; check your cluster UI to ensure that workers are registered and have sufficient resources" />
      <item value="available" />
      <item value="Cannot assign requested address" />
      <item value="僵尸" />
      <item value="植物" />
      <item value="Tracker" />
      <item value="JobTracker" />
      <item value="Container" />
      <item value="The authenticity of host '1.15.154.233 (1.15.154.233)' can't be established" />
      <item value="Does not contain a valid host:port authority" />
      <item value="Specify that URLs are allowed by any authenticated user." />
      <item value="the object that is chained after creating the {@link RequestMatcher}" />
      <item value="Maps any request." />
      <item value="Provides a convenient base class for creating a {@link WebSecurityConfigurer} instance. * The implementation allows customization by overriding methods." />
      <item value="热量" />
      <item value="卡路里" />
      <item value="Cannot resolve view 'books1'" />
      <item value="Add the supplied attribute under the supplied name." />
      <item value="redirect" />
      <item value="form" />
      <item value="Core interface which loads user-specific data. * &lt;p&gt; * It is used throughout the framework as a user DAO and is the strategy used by the * {@link org.springframework.security.authentication.dao.DaoAuthenticationProvider * DaoAuthenticationProvider}. * * &lt;p&gt; * The interface requires only one read-only method, which simplifies support for new * data-access strategies. *" />
      <item value="Locates the user based on the username. In the actual implementation, the search * may possibly be case sensitive, or case insensitive depending on how the * implementation instance is configured. In this case, the &lt;code&gt;UserDetails&lt;/code&gt; * object that comes back may have a username that is of a different case than what * was actually requested.." />
      <item value="The &lt;code&gt;doFilter&lt;/code&gt; method of the Filter is called by the container * each time a request/response pair is passed through the chain due to a * client request for a resource at the end of the chain. The FilterChain * passed in to this method allows the Filter to pass on the request and * response to the next entity in the chain." />
      <item value="Provides access to the next filter in the chain for this * filter to pass the request and response to for further * processing" />
      <item value="Specifies to support form based authentication. If * {@link FormLoginConfigurer#loginPage(String)} is not specified a default login page * will be generated." />
      <item value="Specifies to support form based authentication. If" />
      <item value="Shortcut for specifying URLs require a particular role. If you do not want to * have &quot;ROLE_&quot; automatically inserted see {@link #hasAuthority(String)}." />
      <item value="Disables the {@link AbstractHttpConfigurer} by removing it. After doing so a fresh * version of the configuration can be applied." />
      <item value="Adds CSRF support. This is activated by default when using" />
      <item value="The &lt;code&gt;doFilter&lt;/code&gt; method of the Filter is called by the container * each time a request/response pair is passed through the chain due to a * client request for a resource at the end of the chain. The FilterChain * passed in to this method allows the Filter to pass on the request and * response to the next entity in the chain. * &lt;p&gt; * A typical implementation of this method would follow the following * pattern:- &lt;br&gt; * 1. Examine the request&lt;br&gt; * 2. Optionally wrap the request object with a custom implementation to * filter content or headers for input filtering &lt;br&gt; * 3. Optionally wrap the response object with a custom implementation to * filter content or headers for output filtering &lt;br&gt; * 4. a) &lt;strong&gt;Either&lt;/strong&gt; invoke the next entity in the chain using * the FilterChain object (&lt;code&gt;chain.doFilter()&lt;/code&gt;), &lt;br&gt; * 4. b) &lt;strong&gt;or&lt;/strong&gt; not pass on the request/response pair to the * next entity in the filter chain to block the request processing&lt;br&gt; * 5. Directly set headers on the response after invocation of the next * entity in the filter chain." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="737" />
        <entry key="ENGLISH" value="738" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>