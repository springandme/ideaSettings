<application>
  <component name="AppStorage">
    <histories>
      <item value="遍历" />
      <item value="The fields in the file that should be read. Per default all fields * are read." />
      <item value="The fields of the POJO which are mapped to CSV fields." />
      <item value="Whether the parser should silently ignore malformed lines." />
      <item value="Lines that start with the given String are ignored, disabled by default." />
      <item value="The character to use for quoted String parsing, disabled by default." />
      <item value="The string that separates lines, defaults to newline." />
      <item value="ParserError NUMERIC_VALUE_FORMAT_ERROR" />
      <item value="Creates a new data set that contains a sequence of numbers. The data set will be created in * parallel, so there is no guarantee about the oder of the elements." />
      <item value="Note that this operation will result in a non-parallel data source, i.e. a data source with * a parallelism of one." />
      <item value="Creates a new data set that contains the given elements." />
      <item value="Creates a new [[StructType]] by adding a new nullable field with no metadata." />
      <item value="A row implementation that uses an array of objects as the underlying storage. Note that, while * the array is not copied, and thus could technically be mutated after creation, this is not * allowed." />
      <item value="This method can be used to construct a [[Row]] from a `Seq` of values." />
      <item value="No implicit arguments of type: Encoder[Row]" />
      <item value="分隔符" />
      <item value="specific " />
      <item value="This is declared with parentheses to prevent the Scala compiler from treating // `ds.toDF(&quot;1&quot;)` as invoking this toDF and then apply on the returned DataFrame." />
      <item value="Converts this strongly typed collection of data to generic Dataframe. In contrast to the * strongly typed objects that Dataset operations work on, a Dataframe returns generic [[Row]] * objects that allow fields to be accessed by ordinal or name." />
      <item value="Returns the value at position i of array type as a Scala Seq." />
      <item value="Checks whether the value at position i is null" />
      <item value=":: Experimental :: * Creates a [[Dataset]] with a single `LongType` column named `id`, containing elements * in a range from `start` to `end` (exclusive) with a step value, with partition number * specified." />
      <item value="United States" />
      <item value="managed" />
      <item value="事务" />
      <item value="处理" />
      <item value="分析" />
      <item value="在线" />
      <item value="Returns a [[DataFrameNaFunctions]] for working with missing data." />
      <item value="A container for a [[Dataset]], used for implicit conversions in Scala." />
      <item value="Get the broadcasted value" />
      <item value="&lt;code&gt;JUnitCore&lt;/code&gt; is a facade for running tests. It supports running JUnit 4 tests, * JUnit 3.8.x tests, and mixtures. To run tests from the command line, run * &lt;code&gt;java org.junit.runner.JUnitCore TestClass1 TestClass2 ...&lt;/code&gt;. * For one-shot test runs, use the static method {@link #runClasses(Class[])}. * If you want to add special listeners, * create an instance of {@link org.junit.runner.JUnitCore} first and use it to run the tests." />
      <item value="map" />
      <item value="mapper" />
      <item value="reduce" />
      <item value="Shuffle " />
      <item value="cartesian" />
      <item value="union" />
      <item value="aggregate" />
      <item value="sample" />
      <item value="preserves Partitioning" />
      <item value="parallelize" />
      <item value="This method is identical to `parallelize`." />
      <item value="identical" />
      <item value="Monad " />
      <item value="deploy-mode" />
      <item value="deploy" />
      <item value="standalone " />
      <item value="DAEMON" />
      <item value="Remaining" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="467" />
        <entry key="ENGLISH" value="468" />
        <entry key="ARABIC" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="1" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>