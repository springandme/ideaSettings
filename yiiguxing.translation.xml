<application>
  <component name="AppStorage">
    <histories>
      <item value="Defines the set of cascadable operations that are propagated to the associated entity. The value cascade=ALL is equivalent to cascade={PERSIST, MERGE, REMOVE, REFRESH, DETACH}." />
      <item value="Cascade persist operation" />
      <item value="object references an unsaved transient instance - save the transient instance before flushing: com.hliushi.demo.entity.CstLinkman" />
      <item value="(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider." />
      <item value="(Optional) Whether the database column is nullable." />
      <item value="// Cannot add or update a child row: a foreign key constraint fails (`jpa`.`cst_linkman`, CONSTRAINT `FK_cst_linkman_lkm_cust_id` FOREIGN KEY (`lkm_cust_id`) REFERENCES `cst_customer` (`cust_id`) ON DELETE NO ACTION ON UPDATE NO ACTION)" />
      <item value="he simplest type of mapping to a database column. The Basic annotation can be applied to a persistent property or instance variable of any of the following types: Java primitive types, wrappers of the primitive types, String, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, and any other type that implements java.io.Serializable. The use of the Basic annotation is optional for persistent fields and properties of these types. If the Basic annotation is not specified for such a field or property, the default values of the Basic annotation will apply." />
      <item value="nested exception is org.hibernate.MappingException: Repeated column in mapping for entity: com.hliushi.demo.entity.CstLinkman column: lkm_cust_id (should be mapped with insert=&quot;false&quot; update=&quot;false&quot;)" />
      <item value="(Optional) The column length. (Applies only if a string-valued column is used.)" />
      <item value="(Optional) Whether the database column is nullable" />
      <item value="(should be mapped with insert=&quot;false&quot; update=&quot;false&quot;" />
      <item value="Unable to build Hibernate SessionFactory; nested exception is org.hibernate.MappingException: Repeated column in mapping for entity: com.hliushi.demo.entity.CstLinkman column: lkm_cust_id (should be mapped with insert=&quot;false&quot; update=&quot;false&quot;)" />
      <item value="Whether to initialize the schema on startup" />
      <item value="'Basic' attribute type should not be a container" />
      <item value="Code analysis can't be performed while IDEA updates the indices in background. You can commit the changes without running inspections, or you can wait until indices are built." />
      <item value="specified" />
      <item value="ManyToOne" />
      <item value="Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being created. This will typically be used when providing an extended base interface for all repositories in combination with a custom repository base class to implement methods declared in that intermediate interface. In this case you typically derive your concrete repository interfaces from the intermediate one but don't want to create a Spring bean for the intermediate interface" />
      <item value="(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entities must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime." />
      <item value="Defines that data must be eagerly fetched." />
      <item value="(Optional) The operations that must be cascaded to the target of the association. Defaults to no operations being cascaded. When the target collection is a java.util.Map, the cascade element applies to the map value." />
      <item value="Generates getters for all fields, a useful toString method, and hashCode and equals implementations that check all non-transient fields. Will also generate setters for all non-final fields, as well as a constructor. Equivalent to @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode." />
      <item value="(Optional) The catalog of the table. Defaults to the default catalog." />
      <item value="The simplest type of mapping to a database column. The Basic annotation can be applied to a persistent property or instance variable of any of the following types: Java primitive types, wrappers of the primitive types, String, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, and any other type that implements java.io.Serializable. The use of the Basic annotation is optional for persistent fields and properties of these types. If the Basic annotation is not specified for such a field or property, the default values of the Basic annotation will apply." />
      <item value="(Optional) The name of the primary key generator to use as specified in the SequenceGenerator or TableGenerator annotation. Defaults to the id generator supplied by persistence provider." />
      <item value="Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request" />
      <item value="Error executing DDL via JDBC Statement" />
      <item value="Constraint" />
      <item value="The string has to be a well-formed email address. Exact semantics of what makes up a valid email address are left to Bean Validation providers. Accepts CharSequence." />
      <item value="The annotated element size must be between the specified boundaries (included)." />
      <item value="数据校验" />
      <item value="validation" />
      <item value="Internal" />
      <item value="Could not autowire. There is more than one bean of 'UserDetailsService' type" />
      <item value="This is ultimately a JSON map and any values can be added to it, but JWT standard names are provided as type-safe getters and setters for convenience. Because this interface extends Map&amp;lt;String, Object&amp;gt;, if you would like to add your own properties, you simply use map methods, for example" />
      <item value="patch" />
      <item value="major" />
      <item value="major\" />
      <item value="maior" />
      <item value="minor" />
      <item value="MINOR" />
      <item value="terminated" />
      <item value="There is one change and one conflict left unprocessed. Save changes and mark the conflict resolved anyway?" />
      <item value="Vertical alignment in cells" />
      <item value="URI is not registered (Settings | Languages &amp; Frameworks | Schemas and DTDs" />
      <item value="Learn basic shortcuts and essential features interactively - right inside the IDE. No need to read long manuals or look for screencasts. Just install this plugin, and open with the Help | IDE Features Trainer menu item" />
      <item value="Annotation for externalized configuration. Add this to a class definition or a * {@code @Bean} method in a {@code @Configuration} class if you want to bind and validate * some external Properties (e.g. from a .properties file)." />
      <item value="border" />
      <item value="Create an image which will have written a distorted text." />
      <item value="Responsible for creating captcha image with a text drawn on it." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="842" />
        <entry key="ENGLISH" value="842" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>