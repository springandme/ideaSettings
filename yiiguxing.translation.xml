<application>
  <component name="AppStorage">
    <histories>
      <item value="A {@code Closeable} is a source or destination of data that can be closed. * The close method is invoked to release resources that the object is * holding (such as open files)." />
      <item value="This interface represents only the most basic contract for HTTP request * execution. It imposes no restrictions or particular details on the request * execution process and leaves the specifics of state management, * authentication and redirect handling up to individual implementations." />
      <item value="Constant" />
      <item value="Could not autowire. No beans of 'RedisTemplate&lt;String, Object&gt;' type found." />
      <item value="operate" />
      <item value="操作" />
      <item value="Expire" />
      <item value="expire make a mistake" />
      <item value="Increment an integer value stored as string value under {@code key} by {@code delta}." />
      <item value="MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error." />
      <item value="Options to be used for with {@literal SCAN} command." />
      <item value="Executes the given action within a Redis connection. Application exceptions thrown by the action object get * propagated to the caller (can only be unchecked) whenever possible. Redis exceptions are transformed into * appropriate DAO ones. Allows for returning a result object, that is a domain object or a collection of domain * objects. Performs automatic serialization/deserialization for the given objects to and from binary data suitable * for the Redis storage. Note: Callback code is not supposed to handle transactions itself! Use an appropriate * transaction manager. Generally, callback code must not touch any Connection lifecycle methods, like close, to let * the template do its work." />
      <item value="Executes the given action object within a connection, which can be exposed or not." />
      <item value="Decodes a Base64 String into octets. * &lt;p&gt; * &lt;b&gt;Note:&lt;/b&gt; this method seamlessly handles data encoded in URL-safe or normal mode. * &lt;/p&gt;" />
      <item value="ALGORITHM" />
      <item value="decrypt" />
      <item value="encrypt" />
      <item value="SonarLint: Replace this use of System.out or System.err by a logger" />
      <item value="Autowired members must be defined in valid Spring bean (@Component|@Service|...) " />
      <item value="provision" />
      <item value="Specific" />
      <item value="array of property names to ignore" />
      <item value="Defines size for batch loading of collections or lazy entities. For example... * &lt;blockquote&gt;&lt;pre&gt; * &amp;#064;Entity * &amp;#064;BatchSize(size=100) * class Product { * ... * } * &lt;/pre&gt;&lt;/blockquote&gt; * will initialize up to 100 lazy Product entity proxies at a time. * * &lt;blockquote&gt;&lt;pre&gt; * &amp;#064;OneToMany * &amp;#064;BatchSize(size = 5) / * Set&lt;Product&gt; getProducts() { ... }; * &lt;/pre&gt;&lt;/blockquote&gt; * will initialize up to 5 lazy collections of products at a time *" />
      <item value="Defines size for batch loading of collections or lazy entities. For example..." />
      <item value="inverse" />
      <item value="composite" />
      <item value="anonymous" />
      <item value="valid" />
      <item value="The annotated element must not be {@code null} nor empty. Supported types are:" />
      <item value="Waiting for changelog lock" />
      <item value="Where clause to add to the element Entity or target entity of a collection. The clause is written in SQL. * A common use case here is for soft-deletes." />
      <item value="transient" />
      <item value="Generates an inner type, containing String constants containing the field name for each field. Alternatively, generates an inner enum with enum values matching each field name." />
      <item value="chain" />
      <item value="路径" />
      <item value="Indicates that the persistence provider must assign * primary keys for the entity using a database identity column" />
      <item value="persistence" />
      <item value="Generates implementations for the {@code equals} and {@code hashCode} methods inherited by all objects, based on relevant fields. * &lt;p&gt; * Complete documentation is found at &lt;a href=&quot;https://projectlombok.org/features/EqualsAndHashCode&quot;&gt;the project lombok features page for &amp;#64;EqualsAndHashCode&lt;/a&gt;." />
      <item value="Specifies that the class is an entity. This annotation is applied to the * entity class." />
      <item value="您的账号已被锁定" />
      <item value="EXPIRE" />
      <item value="brain" />
      <item value="SonarLint: This block of commented-out lines of code should be removed. [+4 locations]" />
      <item value="found" />
      <item value="Returns the identifier part of this signature. For methods this * will return the method name." />
      <item value="Returns the fully-qualified name of the declaring type. This is * equivalent to calling getDeclaringType().getName(), but caches * the result for greater efficiency." />
      <item value="Declaring" />
      <item value="navigate" />
      <item value="Navigate To Advised Methods" />
      <item value="p&gt;Provides reflective access to both the state available at a join point and * static information about it. This information is available from the body * of advice using the special form &lt;code&gt;thisJoinPoint&lt;/code&gt;. The primary * use of this reflective information is for tracing and logging applications. * &lt;/p&gt;" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="810" />
        <entry key="ENGLISH" value="811" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>