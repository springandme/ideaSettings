<application>
  <component name="AppStorage">
    <histories>
      <item value="composite" />
      <item value="anonymous" />
      <item value="valid" />
      <item value="The annotated element must not be {@code null} nor empty. Supported types are:" />
      <item value="Waiting for changelog lock" />
      <item value="Where clause to add to the element Entity or target entity of a collection. The clause is written in SQL. * A common use case here is for soft-deletes." />
      <item value="transient" />
      <item value="Generates an inner type, containing String constants containing the field name for each field. Alternatively, generates an inner enum with enum values matching each field name." />
      <item value="chain" />
      <item value="路径" />
      <item value="Indicates that the persistence provider must assign * primary keys for the entity using a database identity column" />
      <item value="persistence" />
      <item value="Generates implementations for the {@code equals} and {@code hashCode} methods inherited by all objects, based on relevant fields. * &lt;p&gt; * Complete documentation is found at &lt;a href=&quot;https://projectlombok.org/features/EqualsAndHashCode&quot;&gt;the project lombok features page for &amp;#64;EqualsAndHashCode&lt;/a&gt;." />
      <item value="Specifies that the class is an entity. This annotation is applied to the * entity class." />
      <item value="您的账号已被锁定" />
      <item value="EXPIRE" />
      <item value="brain" />
      <item value="SonarLint: This block of commented-out lines of code should be removed. [+4 locations]" />
      <item value="found" />
      <item value="Returns the identifier part of this signature. For methods this * will return the method name." />
      <item value="Returns the fully-qualified name of the declaring type. This is * equivalent to calling getDeclaringType().getName(), but caches * the result for greater efficiency." />
      <item value="Declaring" />
      <item value="navigate" />
      <item value="Navigate To Advised Methods" />
      <item value="p&gt;Provides reflective access to both the state available at a join point and * static information about it. This information is available from the body * of advice using the special form &lt;code&gt;thisJoinPoint&lt;/code&gt;. The primary * use of this reflective information is for tracing and logging applications. * &lt;/p&gt;" />
      <item value="aspect" />
      <item value="Readable" />
      <item value="handle" />
      <item value="Catdea Plugin intended to match Android Logcat log entries with the source code that emit these entries, thereby providing navigation and interactivity, in order to simplify debugging or reverse engineering. Plugin uses pre-compile-time calculations to identify log emitters in the source code, thus, no RegExp patterns required. Features" />
      <item value="Code highlighting based of log level: error, warn, info, etc. Intention to highlight columns (time, category, threads, stack frames) in log file editor. Folding of uninteresting events Hyperlinks of stack traces in log Navigation to source code that emit log events (F7). Go to next error action (Shift + F7) Extends selection Intention tp highlight distance between events (marks time as red) Advanced error stripe (heat map) Custom log format more info:" />
      <item value="fount" />
      <item value="find" />
      <item value="The {@code Void} class is an uninstantiable placeholder class to hold a * reference to the {@code Class} object representing the Java keyword * void." />
      <item value="Annotation-specified bean name 'swagger2Controller' for bean class [springfox.documentation.swagger2.web.Swagger2Controller] conflicts with existing, non-compatible bean definition of same name and class [com.hliushi.learn.controller.Swagger2Controller]" />
      <item value="Predicate that evaluates the supplied ant pattern" />
      <item value="Any path satisfies this condition" />
      <item value="A builder which is intended to be the primary interface into the swagger-springmvc framework. * Provides sensible defaults and convenience methods for configuration." />
      <item value="chunked" />
      <item value="Unsupported Media Type" />
      <item value="Required request body is missing: public com.hliushi.learn.response.JsonResult&lt;java.lang.String&gt; com.hliushi.learn.controller.MVCAnnotationController.testRequestBody(java.lang.String)" />
      <item value="mentor" />
      <item value="Required String parameter 'password' is not present" />
      <item value="注解" />
      <item value="Facade" />
      <item value="Raw use of parameterized class 'List'" />
      <item value="操作成功" />
      <item value="操作" />
      <item value="FastJsonConfig' is already defined in this compilation unit" />
      <item value="converter" />
      <item value="Could not write JSON: Can not write a string, expecting field name (context: Object); nested exception is com.fasterxml.jackson.core.JsonGenerationException: Can not write a string, expecting field name (context: Object)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="787" />
        <entry key="ENGLISH" value="787" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>