<application>
  <component name="AppStorage">
    <histories>
      <item value="patch" />
      <item value="major" />
      <item value="major\" />
      <item value="maior" />
      <item value="minor" />
      <item value="MINOR" />
      <item value="terminated" />
      <item value="There is one change and one conflict left unprocessed. Save changes and mark the conflict resolved anyway?" />
      <item value="Vertical alignment in cells" />
      <item value="URI is not registered (Settings | Languages &amp; Frameworks | Schemas and DTDs" />
      <item value="Learn basic shortcuts and essential features interactively - right inside the IDE. No need to read long manuals or look for screencasts. Just install this plugin, and open with the Help | IDE Features Trainer menu item" />
      <item value="Annotation for externalized configuration. Add this to a class definition or a * {@code @Bean} method in a {@code @Configuration} class if you want to bind and validate * some external Properties (e.g. from a .properties file)." />
      <item value="border" />
      <item value="Create an image which will have written a distorted text." />
      <item value="Responsible for creating captcha image with a text drawn on it." />
      <item value="kaptcha" />
      <item value="Kaptcha" />
      <item value="Default {@link Producer} implementation which draws a captcha image using * {@link WordRenderer}, {@link GimpyEngine}, {@link BackgroundProducer}. * Text creation uses {@link TextProducer}." />
      <item value="Forbidden" />
      <item value="Public constant media type for {@code application/problem+json}." />
      <item value="A String equivalent of {@link MediaType#APPLICATION_PROBLEM_JSON_UTF8}." />
      <item value="PROBLEM" />
      <item value="extract" />
      <item value="Enables Spring's annotation-driven transaction management capability, similar to * the support found in Spring's {@code &lt;tx:*&gt;} XML namespace. To be used on * {@link org.springframework.context.annotation.Configuration @Configuration} * classes as follows:" />
      <item value="Annotation to enable JPA repositories. Will scan the package of the annotated configuration class for Spring Data * repositories by default." />
      <item value="criteria" />
      <item value="PORTAL" />
      <item value="release" />
      <item value="Aborted" />
      <item value="Ensures that the entity content is fully consumed and the content stream, if exists, * is closed." />
      <item value="A {@code Closeable} is a source or destination of data that can be closed. * The close method is invoked to release resources that the object is * holding (such as open files)." />
      <item value="This interface represents only the most basic contract for HTTP request * execution. It imposes no restrictions or particular details on the request * execution process and leaves the specifics of state management, * authentication and redirect handling up to individual implementations." />
      <item value="Constant" />
      <item value="Could not autowire. No beans of 'RedisTemplate&lt;String, Object&gt;' type found." />
      <item value="operate" />
      <item value="操作" />
      <item value="Expire" />
      <item value="expire make a mistake" />
      <item value="Increment an integer value stored as string value under {@code key} by {@code delta}." />
      <item value="MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error." />
      <item value="Options to be used for with {@literal SCAN} command." />
      <item value="Executes the given action within a Redis connection. Application exceptions thrown by the action object get * propagated to the caller (can only be unchecked) whenever possible. Redis exceptions are transformed into * appropriate DAO ones. Allows for returning a result object, that is a domain object or a collection of domain * objects. Performs automatic serialization/deserialization for the given objects to and from binary data suitable * for the Redis storage. Note: Callback code is not supposed to handle transactions itself! Use an appropriate * transaction manager. Generally, callback code must not touch any Connection lifecycle methods, like close, to let * the template do its work." />
      <item value="Executes the given action object within a connection, which can be exposed or not." />
      <item value="Decodes a Base64 String into octets. * &lt;p&gt; * &lt;b&gt;Note:&lt;/b&gt; this method seamlessly handles data encoded in URL-safe or normal mode. * &lt;/p&gt;" />
      <item value="ALGORITHM" />
      <item value="decrypt" />
      <item value="encrypt" />
      <item value="SonarLint: Replace this use of System.out or System.err by a logger" />
      <item value="Autowired members must be defined in valid Spring bean (@Component|@Service|...) " />
      <item value="provision" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="833" />
        <entry key="ENGLISH" value="833" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>