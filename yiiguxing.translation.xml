<application>
  <component name="AppStorage">
    <histories>
      <item value="authorize" />
      <item value="revoke" />
      <item value="introspect" />
      <item value="introspection" />
      <item value="revocation" />
      <item value="revpcation" />
      <item value="endpoint" />
      <item value="endpoit" />
      <item value="Criterion" />
      <item value="A boolean flag that can be set to true if the transaction is effectively read-only, allowing for corresponding optimizations at runtime. Defaults to false. This just serves as a hint for the actual transaction subsystem; it will not necessarily cause failure of write access attempts. A transaction manager which cannot interpret the read-only hint will not throw an exception when asked for a read-only transaction but rather silently ignore the hint." />
      <item value="vm" />
      <item value="参数" />
      <item value="访问成功" />
      <item value="Annotation to set defaults when injecting a org.springframework.data.domain.Pageable into a controller method. Instead of configuring sort() and direction() you can also use SortDefault or SortDefault.SortDefaults" />
      <item value="Obtains the current date-time from the system clock in the default time-zone. This will query the system clock in the default time-zone to obtain the current date-time. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded." />
      <item value="Check whether the given String contains actual text. More specifically, this method returns true if the String is not null, its length is greater than 0, and it contains at least one non-whitespace character." />
      <item value="Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or greater hash combined with an 8-byte or greater randomly generated salt." />
      <item value="Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded. Returns true if the passwords match, false if they do not. The stored password itself is never decoded." />
      <item value="Return the contained value, if present, otherwise throw an exception to be created by the provided supplier." />
      <item value="BI audit" />
      <item value="Bi Audit" />
      <item value="Create a new builder with a CREATED status and a location header set to the given URI." />
      <item value="Defines size for batch loading of collections or lazy entities. For example.." />
      <item value="Annotation used to indicate that associated property is part of two-way linkage between fields; and that its role is &quot;child&quot; (or &quot;back&quot;) link. Value type of the property must be a bean: it can not be a Collection, Map, Array or enumeration. Linkage is handled such that the property annotated with this annotation is not serialized; and during deserialization, its value is set to instance that has the &quot;managed&quot; (forward) link." />
      <item value="failed to lazily initialize a collection of role: com.hliushi.demo.entity.CstCustomer.linkmanSet, could not initialize proxy - no Session" />
      <item value="test Add No Cascade" />
      <item value="test Add Cascade" />
      <item value="Cascade Type" />
      <item value="validate" />
      <item value="wrong column type encountered" />
      <item value="Optional) The operations that must be cascaded to the target of the association. Defaults to no operations being cascaded. When the target collection is a java.util.Map, the cascade element applies to the map value." />
      <item value="Defines the set of cascadable operations that are propagated to the associated entity. The value cascade=ALL is equivalent to cascade={PERSIST, MERGE, REMOVE, REFRESH, DETACH}." />
      <item value="Cascade persist operation" />
      <item value="object references an unsaved transient instance - save the transient instance before flushing: com.hliushi.demo.entity.CstLinkman" />
      <item value="(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider." />
      <item value="(Optional) Whether the database column is nullable." />
      <item value="// Cannot add or update a child row: a foreign key constraint fails (`jpa`.`cst_linkman`, CONSTRAINT `FK_cst_linkman_lkm_cust_id` FOREIGN KEY (`lkm_cust_id`) REFERENCES `cst_customer` (`cust_id`) ON DELETE NO ACTION ON UPDATE NO ACTION)" />
      <item value="he simplest type of mapping to a database column. The Basic annotation can be applied to a persistent property or instance variable of any of the following types: Java primitive types, wrappers of the primitive types, String, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, and any other type that implements java.io.Serializable. The use of the Basic annotation is optional for persistent fields and properties of these types. If the Basic annotation is not specified for such a field or property, the default values of the Basic annotation will apply." />
      <item value="nested exception is org.hibernate.MappingException: Repeated column in mapping for entity: com.hliushi.demo.entity.CstLinkman column: lkm_cust_id (should be mapped with insert=&quot;false&quot; update=&quot;false&quot;)" />
      <item value="(Optional) The column length. (Applies only if a string-valued column is used.)" />
      <item value="(Optional) Whether the database column is nullable" />
      <item value="(should be mapped with insert=&quot;false&quot; update=&quot;false&quot;" />
      <item value="Unable to build Hibernate SessionFactory; nested exception is org.hibernate.MappingException: Repeated column in mapping for entity: com.hliushi.demo.entity.CstLinkman column: lkm_cust_id (should be mapped with insert=&quot;false&quot; update=&quot;false&quot;)" />
      <item value="Whether to initialize the schema on startup" />
      <item value="'Basic' attribute type should not be a container" />
      <item value="Code analysis can't be performed while IDEA updates the indices in background. You can commit the changes without running inspections, or you can wait until indices are built." />
      <item value="specified" />
      <item value="ManyToOne" />
      <item value="Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being created. This will typically be used when providing an extended base interface for all repositories in combination with a custom repository base class to implement methods declared in that intermediate interface. In this case you typically derive your concrete repository interfaces from the intermediate one but don't want to create a Spring bean for the intermediate interface" />
      <item value="(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entities must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="851" />
        <entry key="ENGLISH" value="851" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="10" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="phoneticFontFamily" value="Consolas" />
    <option name="primaryFontFamily" value="Consolas" />
    <option name="translateDocumentation" value="true" />
  </component>
</application>